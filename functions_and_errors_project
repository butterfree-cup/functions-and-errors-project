pragma solidity ^0.8.18;

contract SmartContract {
    address public contractOwner;
    uint256 public value;

    modifier onlyOwner() {
        require(msg.sender == contractOwner, "Only the owner can call this function!");
        _;
    }

    constructor() {
        contractOwner = msg.sender;
    }

    function setValue(uint256 _newValue) public onlyOwner {
        require(_newValue > 1, "Value must be greater than 1.");

        value = _newValue;
    }

    function assertDemo(uint256 _num1, uint256 _num2) public pure returns (uint256) {
        assert(_num1 * _num2 > _num1);

        return _num1 * _num2;
    }

    function revertDemo(uint256 _value) public pure returns (uint256) {
        if (_value <= 1) {
            revert("The value should be greater than 1.");
        } else{
            return _value * 10;
        }
    }
}
